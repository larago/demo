说明文档

基本说明》

1. 接口以/api开头，根据版本分别为/api/v1,/api/v2，如此类推。这里是首个版本，故所有接口以/api/v1开头。其中/api/v1返回v1所有的接口。

2. 所有接口返回的信息都包含基本的请求反馈，分别为 “failed”（代表用户的请求失败）, “error”（代表发生错误）, “success”（代表用户请求成功）。

3.根据Restful原则，同一接口采用不同请求方法来进行设计，因时间问题一些代码未经实际运行测试会有BUG。

4.依赖库请参考requirement.txt。

Toekn-Based Authentication用户认证说明：

1. 用户认证用类似OAuth2的原理，只不过授权服务器和资源服务器为同一服务器。因此也无需把用户的信息一同包含到access token中进行加密，只把用户id加入，后端在验证token后凭借用户id就能查询该用户信息。（其实也应该加入如timestamp等信息，这里是简化的，只用到用户id进行加密，所以一解密就是用户id，然后从数据库中查找该用户对象）

2. 产生生存时间为3600s的access token作为唯一请求有权限的资源的依据。而账号密码作为唯一获取access token的依据。

3. 用户不能通过账号和密码直接获取资源，用token进行验证是唯一的方式。

4. /api/v1/login 和 /api/v1/logout 这两个接口仅作为测试接口， 在代码里作为默认验证方式是因为缺乏前端代码情况下更为方便进行测试，但不作为常规接口。主要是这两个接口直接操作客户端的cookie，不符合前后端完全分离的原则，另外也有安全方面的问题。在真正运作时可由前端通过/api/v1/token GET获取access token存到local storage， 而通过每个接口的父类BaseHandler里的get_current_user_via_token方法检验token是否正确。

5. 每个用户同一时间仅能有一个有效的access token作为获取资源的凭证。该access token利用Redis TTL来保证同一时间每个用户唯一access token，在获取的最后一个access token有效期内尝试再次获取会被返回旧的access token，直至过期后需要重新登录并获取新的token。



[反馈]

基础需求：
1、web服务架构采用页面跟数据api分离结构（参考restful）；tornado+postgres实现api接口服务器
2、注意：编码规范，文件结构层次逻辑，接口使用注释
3、交付形式：github或打包源码

说明：经多番查找文章和进行对比，自认为已经实现了相当一部分能体现restful风格的api设计，设计原则上强调前后端分离。数据库运用postgresql，配合ORM是SQLAlchemy。

进阶需求：
1、列表实现分页
2、页面可以采用前端模板，nginx处理静态页面，数据请求转发到tornado
3、tornado实现响应非堵塞
4、api加上参数签名校验

说明： 1. 分页的简陋实现在GetStudentHandler里头(时间仓促，未经测试)，有点类似www.laurarun.com的首页文章列表分页。
2.nginx处理静态页面需从nginx配置文件设置，设置后可把静态文静进行SDK加速。无进行尝试，无实现。
3. 无实现。
4. api加上参数签名校验，根据具体需求把相关参数进行加密，并确定各参数的权限等等，参考了腾讯和新浪的的api文档，实际我理解上就是Token Based Authentication。另有一种更简单的HTTPauth ,已实现，但发现实际上很少用到且很不安全，故改为token based。

LS： 写这个demo由于个人原因耽搁了一下进度（这个demo总计大概花了3.5天脱产时间），虽然很快了解tornado基础后用非前后端分离的方式做出网站(文件夹non-split)，但其后主要把时间理清如何彻底前后端分离(https://segmentfault.com/q/1010000006792835)，放在参考设计出足够restful的api和认证问题上，因为基础需求里管理员要实现登入登出必须要解决这个问题。也因为前端方面要做出类似单页面应用或也是纯Ajax交互方面实在能力不足，所以也没有对前端进行架构，才会用到tornado的set_secure_cookie这种办法设置和放入access token进行简单的测试。由于搞清楚技术细节之后时间不多，所以匆忙地把剩余大部分功能写完，代码未经debug是肯定运行不起来的（而本应每写一个小单元就测试一下，另外没有进行测试部署阶段没有把综合环境搭起来进行测试会有很多小问题）。
